//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public ScoreComponent score { get { return (ScoreComponent)GetComponent(GameSessionComponentIds.Score); } }
        public bool hasScore { get { return HasComponent(GameSessionComponentIds.Score); } }

        public Entity AddScore(int newValue) {
            var component = CreateComponent<ScoreComponent>(GameSessionComponentIds.Score);
            component.value = newValue;
            return AddComponent(GameSessionComponentIds.Score, component);
        }

        public Entity ReplaceScore(int newValue) {
            var component = CreateComponent<ScoreComponent>(GameSessionComponentIds.Score);
            component.value = newValue;
            ReplaceComponent(GameSessionComponentIds.Score, component);
            return this;
        }

        public Entity RemoveScore() {
            return RemoveComponent(GameSessionComponentIds.Score);
        }
    }

    public partial class Context {

        public Entity scoreEntity { get { return GetGroup(GameSessionMatcher.Score).GetSingleEntity(); } }
        public ScoreComponent score { get { return scoreEntity.score; } }
        public bool hasScore { get { return scoreEntity != null; } }

        public Entity SetScore(int newValue) {
            if(hasScore) {
                throw new EntitasException("Could not set score!\n" + this + " already has an entity with ScoreComponent!",
                    "You should check if the context already has a scoreEntity before setting it or use context.ReplaceScore().");
            }
            var entity = CreateEntity();
            entity.AddScore(newValue);
            return entity;
        }

        public Entity ReplaceScore(int newValue) {
            var entity = scoreEntity;
            if(entity == null) {
                entity = SetScore(newValue);
            } else {
                entity.ReplaceScore(newValue);
            }

            return entity;
        }

        public void RemoveScore() {
            DestroyEntity(scoreEntity);
        }
    }
}

    public partial class GameSessionMatcher {

        static IMatcher _matcherScore;

        public static IMatcher Score {
            get {
                if(_matcherScore == null) {
                    var matcher = (Matcher)Matcher.AllOf(GameSessionComponentIds.Score);
                    matcher.componentNames = GameSessionComponentIds.componentNames;
                    _matcherScore = matcher;
                }

                return _matcherScore;
            }
        }
    }
