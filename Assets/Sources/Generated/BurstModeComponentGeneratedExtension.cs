//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        static readonly BurstModeComponent burstModeComponent = new BurstModeComponent();

        public bool isBurstMode {
            get { return HasComponent(ComponentIds.BurstMode); }
            set {
                if (value != isBurstMode) {
                    if (value) {
                        AddComponent(ComponentIds.BurstMode, burstModeComponent);
                    } else {
                        RemoveComponent(ComponentIds.BurstMode);
                    }
                }
            }
        }

        public Entity IsBurstMode(bool value) {
            isBurstMode = value;
            return this;
        }
    }

    public partial class Pool {
        public Entity burstModeEntity { get { return GetGroup(Matcher.BurstMode).GetSingleEntity(); } }

        public bool isBurstMode {
            get { return burstModeEntity != null; }
            set {
                var entity = burstModeEntity;
                if (value != (entity != null)) {
                    if (value) {
                        CreateEntity().isBurstMode = true;
                    } else {
                        DestroyEntity(entity);
                    }
                }
            }
        }
    }

    public partial class Matcher {
        static IMatcher _matcherBurstMode;

        public static IMatcher BurstMode {
            get {
                if (_matcherBurstMode == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.BurstMode);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherBurstMode = matcher;
                }

                return _matcherBurstMode;
            }
        }
    }
}
