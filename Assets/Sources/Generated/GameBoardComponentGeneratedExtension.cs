//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public GameBoardComponent gameBoard { get { return (GameBoardComponent)GetComponent(GameComponentIds.GameBoard); } }
        public bool hasGameBoard { get { return HasComponent(GameComponentIds.GameBoard); } }

        public Entity AddGameBoard(int newColumns, int newRows) {
            var component = CreateComponent<GameBoardComponent>(GameComponentIds.GameBoard);
            component.columns = newColumns;
            component.rows = newRows;
            return AddComponent(GameComponentIds.GameBoard, component);
        }

        public Entity ReplaceGameBoard(int newColumns, int newRows) {
            var component = CreateComponent<GameBoardComponent>(GameComponentIds.GameBoard);
            component.columns = newColumns;
            component.rows = newRows;
            ReplaceComponent(GameComponentIds.GameBoard, component);
            return this;
        }

        public Entity RemoveGameBoard() {
            return RemoveComponent(GameComponentIds.GameBoard);
        }
    }

    public partial class Context {

        public Entity gameBoardEntity { get { return GetGroup(GameMatcher.GameBoard).GetSingleEntity(); } }
        public GameBoardComponent gameBoard { get { return gameBoardEntity.gameBoard; } }
        public bool hasGameBoard { get { return gameBoardEntity != null; } }

        public Entity SetGameBoard(int newColumns, int newRows) {
            if(hasGameBoard) {
                throw new EntitasException("Could not set gameBoard!\n" + this + " already has an entity with GameBoardComponent!",
                    "You should check if the context already has a gameBoardEntity before setting it or use context.ReplaceGameBoard().");
            }
            var entity = CreateEntity();
            entity.AddGameBoard(newColumns, newRows);
            return entity;
        }

        public Entity ReplaceGameBoard(int newColumns, int newRows) {
            var entity = gameBoardEntity;
            if(entity == null) {
                entity = SetGameBoard(newColumns, newRows);
            } else {
                entity.ReplaceGameBoard(newColumns, newRows);
            }

            return entity;
        }

        public void RemoveGameBoard() {
            DestroyEntity(gameBoardEntity);
        }
    }
}

    public partial class GameMatcher {

        static IMatcher _matcherGameBoard;

        public static IMatcher GameBoard {
            get {
                if(_matcherGameBoard == null) {
                    var matcher = (Matcher)Matcher.AllOf(GameComponentIds.GameBoard);
                    matcher.componentNames = GameComponentIds.componentNames;
                    _matcherGameBoard = matcher;
                }

                return _matcherGameBoard;
            }
        }
    }
